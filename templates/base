# Rails Base Configuration Template
# This template captures the current Rails 8.0.2 setup with PostgreSQL, Vite, and Tailwind CSS

## Ruby Version
RUBY_VERSION=3.4.4

## Core Rails Configuration

### Gemfile Configuration
```ruby
# frozen_string_literal: true

source 'https://rubygems.org'
git_source(:github) { |repo| "https://github.com/#{repo}.git" }

ruby '3.4.4'

# Core Rails gems
gem 'rails', '~> 8.0.2'
gem 'puma', '~> 6.6.0'
gem 'pg', '~> 1.5.9'
gem 'turbo-rails', '~> 2.0.16'
gem 'tzinfo-data', platforms: %i[mingw mswin x64_mingw jruby]

# Frontend build tools
gem 'vite_rails', '~> 3.0.19'

# Email
gem 'mailgun-ruby', '~> 1.3.6'

group :development, :test do
  gem 'dotenv-rails', '~> 3.1.8'
  gem 'factory_bot_rails', '~> 6.4.4'
  gem 'faker', '~> 3.5.1'
  gem 'pry', '~> 0.15.2'
  gem 'rspec-rails', '~> 8.0.0'
end

group :development do
  gem 'foreman', '~> 0.88.1'
  gem 'letter_opener', '~> 1.10.0'
  gem 'rubocop-rails', '~> 2.32.0', require: false
end

group :test do
  gem 'shoulda-matchers', '~> 6.5.0'
end
```

### Application Configuration (config/application.rb)
```ruby
# frozen_string_literal: true

require_relative 'boot'

require 'rails'
# Pick the frameworks you want:
require 'active_model/railtie'
require 'active_job/railtie'
require 'active_record/railtie'
# require "active_storage/engine"
require 'action_controller/railtie'
require 'action_mailer/railtie'
# require "action_mailbox/engine"
# require "action_text/engine"
require 'action_view/railtie'
require 'action_cable/engine'
# require "rails/test_unit/railtie"

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module PlaceholderName
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 8.0

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w[assets tasks])

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")

    # Don't generate system test files.
    config.generators.system_tests = nil
  end
end
```

### Database Configuration (config/database.yml)
```yaml
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  host: <%= ENV.fetch("DATABASE_HOST") { "localhost" } %>
  username: <%= ENV.fetch("DATABASE_USER") { "postgres" } %>
  password: <%= ENV.fetch("DATABASE_PASSWORD") { "password" } %>

development:
  <<: *default
  database: rails_template_development

test:
  <<: *default
  database: rails_template_test

production:
  <<: *default
  database: placeholder_name_production
  username: placeholder_name
  password: <%= ENV["PLACEHOLDER_NAME_DATABASE_PASSWORD"] %>
```

### Routes Configuration (config/routes.rb)
```ruby
# frozen_string_literal: true

Rails.application.routes.draw do
  # Add your routes here
end
```

## Frontend Configuration

### Package.json
```json
{
  "devDependencies": {
    "vite": "^5.0.0",
    "vite-plugin-ruby": "^5.1.0"
  },
  "dependencies": {
    "@hotwired/stimulus": "^3.2.2",
    "@hotwired/turbo-rails": "^8.0.16",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/vite": "^4.1.8",
    "stimulus-vite-helpers": "^3.1.0",
    "tailwindcss": "4.1.8"
  },
  "scripts": {
    "build": "vite build --outDir public"
  }
}
```

### Vite Configuration (vite.config.mjs)
```javascript
import { defineConfig } from 'vite'
import RubyPlugin from 'vite-plugin-ruby'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    tailwindcss(),
    RubyPlugin(),
  ],
})
```

### Vite Rails Configuration (config/vite.json)
```json
{
  "all": {
    "sourceCodeDir": "app/frontend",
    "watchAdditionalPaths": []
  },
  "development": {
    "autoBuild": true,
    "publicOutputDir": "vite-dev",
    "port": 3036
  },
  "test": {
    "autoBuild": true,
    "publicOutputDir": "vite-test",
    "port": 3037
  }
}
```

## Development Tools

### PostgreSQL WSL Management Script (bin/postgres/wsl)
```bash
#!/bin/bash
# PostgreSQL WSL Management Script
# Usage: bin/postgres/wsl [create|start|stop|purge|status]

# Commands:
#   create  - Set up PostgreSQL for Rails development
#   start   - Start PostgreSQL service
#   stop    - Stop PostgreSQL service
#   status  - Show PostgreSQL service status
#   purge   - Remove all PostgreSQL data (DANGEROUS!)
```

### Procfile.dev
```
web: bin/rails server -p 3000
vite: bin/vite dev
```

## Environment Variables (.env.example)
```
# Database
DATABASE_HOST=localhost
DATABASE_USER=postgres
DATABASE_PASSWORD=password

# Rails
RAILS_MAX_THREADS=5

# Mailgun (for email)
MAILGUN_API_KEY=your_mailgun_api_key
MAILGUN_DOMAIN=your_mailgun_domain

# Production
PLACEHOLDER_NAME_DATABASE_PASSWORD=your_production_db_password
```

## Key Features

### Rails 8.0.2 Setup
- ✅ PostgreSQL database adapter
- ✅ Puma web server
- ✅ Turbo Rails for SPA-like experience
- ✅ Action Cable for WebSockets
- ✅ Mailgun for email delivery

### Frontend Build System
- ✅ Vite for fast development builds
- ✅ Tailwind CSS 4.1.8 for styling
- ✅ Stimulus for JavaScript components
- ✅ Hot module replacement

### Development Tools
- ✅ RSpec for testing
- ✅ Factory Bot for test data
- ✅ Faker for generating test data
- ✅ Pry for debugging
- ✅ RuboCop for code linting
- ✅ Foreman for process management
- ✅ Letter Opener for email preview

### Database
- ✅ PostgreSQL with WSL management script
- ✅ Environment-based configuration
- ✅ Connection pooling

### Testing
- ✅ RSpec Rails
- ✅ Factory Bot Rails
- ✅ Shoulda Matchers
- ✅ Faker for test data generation

## Setup Commands

```bash
# Install dependencies
bundle install
yarn install

# Setup database
bin/postgres/wsl create

# Start development server
bin/dev
```

## File Structure
```
rails-template/
├── app/
│   ├── controllers/
│   ├── frontend/          # Vite source directory
│   ├── helpers/
│   ├── mailers/
│   ├── models/
│   └── views/
├── bin/
│   └── postgres/
│       └── wsl            # PostgreSQL management script
├── config/
│   ├── application.rb
│   ├── database.yml
│   ├── routes.rb
│   └── vite.json
├── templates/
│   └── base               # This configuration template
├── Gemfile
├── package.json
├── vite.config.mjs
└── Procfile.dev
``` 